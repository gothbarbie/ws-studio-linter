const HTMLParser = require( 'htmlparser2' ).Parser;
const Pos = require( './position.js' );

const allMatches = require( './util/allMatches.js' );
const stringSet = require( './util/stringSet.js' );
const validateCSS = require( './css.js' );
const validateJS = require( './js.js' );

const forbiddenTags = stringSet('html,head,meta,title,body'.split( ',' ) );

const constants = require( './constants.js' );

const regexAndSet = require( './validators/regex-and-set.js' );

module.exports = validateHTML;

function validateHTML( html, errors ) {
	errors = errors || [];

	var wantText;
	var _text;

	var position = Pos.initial();
	var lastParserIndex = 0;

	function updateStart( start ) {
		if ( lastParserIndex !== start ) {
			position = Pos.move( position, html.slice( lastParserIndex, start ) );
			lastParserIndex = start;
		}
	}

	function error( message, start, end ) {
		start = start || parser.startIndex;
		end = end || parser.endIndex;

		updateStart( start );

		errors.push({
			start: position,
			end: Pos.move( position, html.slice( start, end ) ),
			message: message
		});
	}

	regexAndSet( html, Pos.initial(), errors, /STUDIO_([A-Z]+(?:_[A-Z]+)*)/g, constants.STUDIO_EVENTS, `isn't a valid tracking event` );
	regexAndSet( html, Pos.initial(), errors, /WS_DYN_INS_([_A-Z]+(?:\/\/)?)/g, constants.DYN_INS, `isn't a valid dynamic insertion string` );

	const parser = new HTMLParser({
		onprocessinginstruction( _, raw ) {
			error( `unexpected processing instruction '<${ raw }>'`,
				parser.endIndex + 1 /* ' ' */,
				parser.endIndex + raw.length + 3 /* ' <...>' */ );
		},

		onopentag( tag, attrs ) {
			if ( typeof attrs.class === 'string' && attrs.class.indexOf( 'WS_DYN_INS_RAND' ) === -1 && attrs.class.indexOf( 'helper-ignore' ) === -1 ) {
				error( `the 'class' attribute is missing WS_DYN_INS_RAND` );
			}

			if ( typeof attrs.id === 'string' && attrs.id.indexOf( 'WS_DYN_INS_RAND' ) === -1 ) {
				error( `the 'id' attribute is missing WS_DYN_INS_RAND` );
			}

			if ( ( tag === 'script' && !attrs.src ) || tag === 'style' ) {
				updateStart( parser.endIndex + 1 );
				wantText = true;
				_text = '';
			}

			else if ( tag === 'link' ) {
				if ( attrs.rel === 'stylesheet' ) {
					error( 'External CSS files are not allowed' );
				}
			}

			else if ( tag === 'a' && attrs.href && attrs.href.slice( 0, 'WS_DYN_INS_LINKURL'.length ) === 'WS_DYN_INS_LINKURL' && attrs.target !== '_top' ) {
				error( `'<a>' tags with 'href="WS_DYN_INS_LINKURL..."' must have 'target="_top"'` );
			}

			else if ( tag in forbiddenTags ) {
				error( `'<${ tag }>' tags are not allowed` )
			}

		},
		ontext( text ) {
			if ( wantText ) {
				_text += text;
			}
		},
		onclosetag( tag ) {
			if ( wantText ) {
				wantText = false;

				if ( tag === 'script' ) {
					validateJS( _text, position, errors );
				}
				else if ( tag === 'style' ) {
					validateCSS( _text, position, errors );
				}
			}
		}
	});

	parser.write( html );
	parser.end();

	return errors;
}
