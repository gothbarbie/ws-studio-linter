const assert = require( 'assert' );
const html = require( '../' ).html;

module.exports = function () {
	it( 'locates external css', function () {
		assert.deepEqual( html( `<link rel="stylesheet" href="style.css">`), [
			{
				start: {
					index: 0,
					line: 0,
					column: 0
				},
				end: {
					index: 39,
					line: 0,
					column: 39
				},
				message: 'External CSS files are not allowed'
			}
		])
	});

	it( 'locates elements with bad classes/ids', function () {
		assert.deepEqual( html( `<div class="a"></div><p id="b"></p>`), [
			{
				start: {
					index: 0,
					line: 0,
					column: 0
				},
				end: {
					index: 14,
					line: 0,
					column: 14
				},
				message: `the 'class' attribute is missing WS_DYN_INS_RAND`
			},
			{
				start: {
					index: 21,
					line: 0,
					column: 21
				},
				end: {
					index: 30,
					line: 0,
					column: 30
				},
				message: `the 'id' attribute is missing WS_DYN_INS_RAND`
			}
		]);
	});

	it( 'allows a tags with "helper-ignore" classes', function () {
		assert.deepEqual( html( `<a class="helper-ignore">foo</a>`), []);
	});

	it( 'rejects processing instructions', function () {
		assert.deepEqual( html( `foo <!doctype html>`), [
			{
				start: {
					index: 4,
					line: 0,
					column: 4
				},
				end: {
					index: 19,
					line: 0,
					column: 19
				},
				message: `unexpected processing instruction '<!doctype html>'`
			}
		]);
	});

	it( 'rejects a[href=WS_DYN_INS_LINKURL] without target=_top', function () {
		assert.deepEqual( html( `<br><a href="WS_DYN_INS_LINKURLfoo"></a>`), [
			{
				start: {
					index: 4,
					line: 0,
					column: 4
				},
				end: {
					index: 35,
					line: 0,
					column: 35
				},
				message: `'<a>' tags with 'href="WS_DYN_INS_LINKURL..."' must have 'target="_top"'`
			}
		]);
	});

	it( 'rejects invalid WS_DYN_INS_... strings', function () {
		assert.deepEqual( html( `WS_DYN_INS_LINKURL WS_DYN_INS_MONKEY WS_DYN_INS_RAND WS_DYN_INS_SDI
WS_DYN_INS_HTTP_SCHEME_A// WS_DYN_INS_HTTP_SCHEME_//` ), [
			{
				start: {
					index: 19,
					line: 0,
					column: 19
				},
				end: {
					index: 36,
					line: 0,
					column: 36
				},
				message: `'WS_DYN_INS_MONKEY' isn't a valid dynamic insertion string`
			},
			{
				start: {
					index: 53,
					line: 0,
					column: 53
				},
				end: {
					index: 67,
					line: 0,
					column: 67
				},
				message: `'WS_DYN_INS_SDI' isn't a valid dynamic insertion string`
			},
			{
				start: {
					index: 68,
					line: 1,
					column: 0,
				},
				end: {
					index: 94,
					line: 1,
					column: 26,
				},
				message: `'WS_DYN_INS_HTTP_SCHEME_A//' isn't a valid dynamic insertion string`
			}
		]);
	});

	it( 'rejects tags like <html>, <head> and <body>', function () {
		assert.deepEqual( html( `<html><head></head><body></body></html>`), [
			{
				start: {
					index: 0,
					line: 0,
					column: 0
				},
				end: {
					index: 5,
					line: 0,
					column: 5
				},
				message: `'<html>' tags are not allowed`
			},
			{
				start: {
					index: 6,
					line: 0,
					column: 6
				},
				end: {
					index: 11,
					line: 0,
					column: 11
				},
				message: `'<head>' tags are not allowed`
			},
			{
				start: {
					index: 19,
					line: 0,
					column: 19
				},
				end: {
					index: 24,
					line: 0,
					column: 24
				},
				message: `'<body>' tags are not allowed`
			}
		]);
	});

	it( 'tests JS in script tags', function () {
		assert.deepEqual( html( `<div></div><script>var a;</script>`), [
			{
				start: {
					index: 23,
					line: 0,
					column: 23
				},
				end: {
					index: 24,
					line: 0,
					column: 24
				},
				message: `Global variable 'a' is missing WS_DYN_INS_RAND`
			}
		]);
	});

	it( 'handles scripts with `<` characters', function () {
		assert.deepEqual( html( `<script>while( a < b );</script>`), []);
	});

	it( 'accepts single-quotes', function () {
		assert.deepEqual( html( `<p>What people don't understand is\nthat single-quotes aren't a problem!` ), [] );
	});

	it( 'rejects invalid tracking events', function () {
		assert.deepEqual( html( `foo STUDIO_CLICK_BUTTON bax STUDIO_BUTTON_CLICK, STUDIO_SWUPE` ), [
			// 'STUDIO_CLICK_BUTTON' is ok
			{
				start: {
					index: 28,
					line: 0,
					column: 28
				},
				end: {
					index: 47,
					line: 0,
					column: 47
				},
				message: `'STUDIO_BUTTON_CLICK' isn't a valid tracking event`
			},
			{
				start: {
					index: 49,
					line: 0,
					column: 49
				},
				end: {
					index: 61,
					line: 0,
					column: 61
				},
				message: `'STUDIO_SWUPE' isn't a valid tracking event`
			}
		]);
	});

	it( 'correctly marks the position of inline scripts', function () {
		const code = `
<script>
  var aaaaaa = 'o';
</script>`;

		assert.deepEqual( html( code ), [
			{
				start: {
					index: 16,
					line: 2,
					column: 6,
				},
				end: {
					index: 22,
					line: 2,
					column: 12,
				},
				message: `Global variable 'aaaaaa' is missing WS_DYN_INS_RAND`,
			},
		]);
	});
};
